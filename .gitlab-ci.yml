# GitLab Continuous Integration configuration for the repository.

stages:
  - test

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1
  UV_VERSION: 0.5
  UV_CACHE_DIR: .uv-cache
  PYTHON_VERSION: 3.11
  BASE_LAYER: bookworm-slim

# Run pre-commit hooks
pre-commit:
  stage: test
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  before_script:
    - export PATH=/root/.local/bin:$PATH
    - apt-get update && apt-get install git -y
  script:
    - uv tool install pre-commit
    - pre-commit run --all-files

# Run code quality checks
# code_quality:
#   stage: test
#   tags:
#     - docker-privileged-xl
#   artifacts:
#     paths: [gl-code-quality-report.json]

# include:
#   - template: Code-Quality.gitlab-ci.yml

# Run tests with coverage
pytest:
  stage: test
  coverage: '/COVERAGE: (\d+\.\d+\%)/'
  tags:
    - cvmfs
  image: gitlab-registry.cern.ch/tadej/os-containers/alma9-batch
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - dependencies/hashes
      paths:
        - dependencies/build
        - dependencies/install
  before_script:
    - export PATH=/home/atlas/.local/bin:$PATH
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export ATLAS_LOCAL_ROOT_BASE="/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase"
    - set +e
    - source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh
    - setupATLAS -t devatlr
    - source "./scripts/setup_LCG_view.sh"
    - set -e
    - source "./scripts/setup_venv.sh"
    - source "./scripts/setup_acts.sh"
  script:
    - pytest -W error --junitxml=report.xml
    - export COVERAGE=$(coverage report --format=total)
    - "echo COVERAGE: ${COVERAGE}%"
  artifacts:
    paths:
      - coverage.xml
      - coverage/*
    expire_in: 1 day
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: always
